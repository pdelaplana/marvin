name: Deploy to Supabase

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      deploy_functions:
        description: 'Deploy Edge Functions'
        required: false
        default: true
        type: boolean
      deploy_database:
        description: 'Run Database Migrations'
        required: false
        default: true
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify Supabase CLI installation
        run: supabase --version

      - name: Link Supabase project
        run: supabase link --project-ref $SUPABASE_PROJECT_ID 

      - name: Run database migrations
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.deploy_database == true)
        run: supabase db push

      - name: Deploy Edge Functions
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.deploy_functions == true)
        run: supabase functions deploy join-waitlist

      - name: Verify deployment
        run: |
          echo "üöÄ Deployment Summary:"
          echo "Environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}"
          
          if [[ "${{ github.event_name }}" == "push" ]] || [[ "${{ inputs.deploy_database }}" == "true" ]]; then
            echo "‚úÖ Database migrations applied"
          else
            echo "‚è≠Ô∏è Database migrations skipped"
          fi
          
          if [[ "${{ github.event_name }}" == "push" ]] || [[ "${{ inputs.deploy_functions }}" == "true" ]]; then
            echo "‚úÖ Edge Functions deployed"
          else
            echo "‚è≠Ô∏è Edge Functions deployment skipped"
          fi
          
          echo "üéâ Deployment completed successfully"

  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local development
        run: supabase start

      - name: Run database migrations locally
        run: supabase db reset

      - name: Test Edge Functions locally
        run: |
          # Start the function server in background
          supabase functions serve join-waitlist &
          FUNC_PID=$!
          
          # Wait for function server to start
          sleep 10
          
          # Test the function with a sample request
          curl -X POST http://127.0.0.1:54321/functions/v1/join-waitlist \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU" \
            -d '{"applicationId": "test-app-id", "email": "test@example.com", "sourceUrl": "https://test.com", "country": "US"}' \
            --fail-with-body || echo "Function test completed (expected to fail with invalid app ID)"
          
          # Clean up
          kill $FUNC_PID || true

      - name: Stop Supabase local development
        run: supabase stop
        if: always()

      - name: Test Results
        run: |
          echo "‚úÖ Local database setup successful"
          echo "‚úÖ Edge Function compilation successful"
          echo "‚úÖ CI tests completed"